[gd_scene load_steps=8 format=3 uid="uid://tmncwa8ekv5l"]

[ext_resource type="TileSet" uid="uid://dxtnssuqawohx" path="res://backdrops.tres" id="1_o1dhr"]
[ext_resource type="Script" path="res://game.gd" id="2_him4c"]
[ext_resource type="Texture2D" uid="uid://bcv8a001ke3v8" path="res://upBlockTest.png" id="3_adufm"]
[ext_resource type="Script" path="res://upBlock.gd" id="3_oi8mv"]
[ext_resource type="Script" path="res://instruction_text.gd" id="3_rp448"]
[ext_resource type="Script" path="res://codePanel.gd" id="4_6or88"]

[sub_resource type="GDScript" id="GDScript_6h84l"]
script/source = "extends Node2D
# Assuming you have a TileMap node in your scene
@onready var tilemap: TileMap = $TileMap

@export var currLevel = 0

var startPosition = Vector2i(7, 7)
var replacedTile = 93
var pos = Vector2i(7, 7)

var startDir = [1, ]
var currDr = 1

var tile_values: Dictionary = {}

var allowedBlocks = [0, 70, 71, 72]
#var blockedBlocks = []
var addedTiles = 7
var levelAllowedBlocks = [120] # Maybe make 90 jump for block or move allowed special to 90
var specialBlocks = [70, 71, 72] # Redirect block

var levelTilesPoint = 90

func change_tile(cell_position: Vector2i, new_tile_id: int, new_tile_atlas_coords: Vector2i = Vector2i(0, 0)) -> void:
	# Set the tile at the specified cell position
	tilemap.set_cell(0, cell_position, new_tile_id, new_tile_atlas_coords)

func get_tile_id_at(cell_position: Vector2i) -> int:
	# Get the source ID of the tile at the specified cell position
	var source_id: int = tilemap.get_cell_source_id(0, cell_position)
	
	# If there's a tile at the position, return its source ID; otherwise, return -1
	return source_id

func get_tile_coordinates(cell: Vector2i) -> Dictionary:
	# Get the tile's top-left corner in the TileMap's local space
	var tile_top_left = tilemap.map_to_local(cell)

	# Get the tile's size
	var tile_size = Vector2(tilemap.tile_set.tile_size)

	# Calculate the tile's bottom-right corner
	var tile_bottom_right = tile_top_left + tile_size

	# Calculate the tile's center
	var tile_center = (tile_top_left + tile_bottom_right) / 2

	# Return the coordinates as a dictionary
	return {
		\"top_left\": tile_top_left,
		\"bottom_right\": tile_bottom_right,
		\"center\": tile_center
	}

func spawn_labels_for_tile_id(tile_id: int, data) -> void:
	# Get all used cells in the TileMap
	var used_cells = tilemap.get_used_cells(0)

	for cell in used_cells:
		# Check if the tile has the specified ID
		if get_tile_id_at(cell) == tile_id:
			spawn_labels_at_tile(cell, data)

func spawn_labels_at_tile(cell: Vector2i, data) -> void:
	# Create a Label node
	var label = Label.new()
	label.text = str(data)
	if typeof(data) == 1:
		if data: label.text = \"T\"
		elif not data: label.text = \"F\"
		else: print(\"Something went very wrong (f0wuf).\")

	# Scale the label to 20%
	label.scale = Vector2(0.4, 0.4)
	
	# --- Calculate the tile's center ---
	# 1. Get the tile's top-left corner in the TileMap's local space
	var tile_local_pos = tilemap.map_to_local(cell)

	# --- Adjust the label's position to center it ---
	# 1. Get the label's scaled size
	var label_size = label.get_minimum_size() * label.scale
	print(label_size)
	# 2. Offset the label so its center aligns with the tile's center
	label.position = tile_local_pos - (label_size / 2)

	# Add the Label to the scene
	add_child(label)

	# Store the value
	tile_values[cell] = data

func destroy_labels_for_tile_id(tile_id: int) -> void:
	# Get all used cells in the TileMap
	var used_cells = tilemap.get_used_cells(0)

	for cell in used_cells:
		# Check if the tile has the specified ID
		if get_tile_id_at(cell) == tile_id:
			destroy_label_at_tile(cell)

func destroy_label_at_tile(cell: Vector2i) -> void:
	# Check if the tile has a stored value
	if tile_values.has(cell):
		# Remove the value from the dictionary
		tile_values.erase(cell)

		# Iterate through all children to find the label associated with the tile
		for child in get_children():
			if child is Label:
				# Calculate the expected position of the label for the given cell
				var tile_local_pos = tilemap.map_to_local(cell)
				var label_size = child.get_minimum_size() * child.scale
				var expected_position = tile_local_pos - (label_size / 2)

				# If the label's position matches the expected position, remove it
				if child.position == expected_position:
					child.queue_free()  # Remove the label node from the scene
					break  # Exit the loop once the label is found and removed

func update_label_at_tile(cell: Vector2i, data) -> void:
	destroy_label_at_tile(cell)
	spawn_labels_at_tile(cell, data)

func updatePosition(dir) -> void:
	if dir == (\"up\"):
		#print(\"debug up signal\")
			change_tile(pos, replacedTile)
			pos.y -= 1
			replacedTile = get_tile_id_at(pos)
			change_tile(pos,6)
	if dir == (\"right\"):
		var replacementTest = get_tile_id_at(Vector2i(pos.x+1, pos.y))
		if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
			change_tile(pos, replacedTile)
			pos.x += 1
			replacedTile = get_tile_id_at(pos)
			change_tile(pos,6)
	if dir == (\"down\"):
		var replacementTest = get_tile_id_at(Vector2i(pos.x, pos.y+1))
		if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
			change_tile(pos, replacedTile)
			pos.y += 1
			replacedTile = get_tile_id_at(pos)
			change_tile(pos,6)
	if dir == (\"left\"):
		var replacementTest = get_tile_id_at(Vector2i(pos.x-1, pos.y))
		if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
			change_tile(pos, replacedTile)
			pos.x -= 1
			replacedTile = get_tile_id_at(pos)
			change_tile(pos,6)

func _input(event: InputEvent) -> void:
	# Check if the event is a mouse button click
	if event is InputEventMouseButton and event.pressed:
		# Get the mouse position in the TileMap's local space
		var mouse_position: Vector2 = tilemap.get_local_mouse_position()
		
		# Convert the mouse position to tile coordinates
		var tile_coords: Vector2i = tilemap.local_to_map(mouse_position)
		
		
		
		
		
		if event.button_index == MOUSE_BUTTON_LEFT:
			
			
			# Check if the tile coordinates are valid (optional)
			var curr = tilemap.get_cell_source_id(0, tile_coords)
			if (curr != -1) and (curr <levelTilesPoint or curr in levelAllowedBlocks):
				destroy_label_at_tile(tile_coords)
				var pointer = allowedBlocks.find(get_tile_id_at(tile_coords)) # [0,0,0,0]
				if pointer+1 < len(allowedBlocks): pointer += 1; print(pointer)
				else: pointer = 0
				print(pointer)
				
				match allowedBlocks[pointer]:
					0:
						pass
					70:
						pass # Counter block
					71:
						spawn_labels_at_tile(tile_coords, true)
					72:
						pass # CountDownBlock
				
				change_tile(tile_coords, allowedBlocks[pointer])
				
				
				
		if event.button_index == MOUSE_BUTTON_RIGHT:
			# Print the value stored at the clicked cell (if it exists)
			if tile_values.has(tile_coords):
				
				print(\"Value at cell \", tile_coords, \": \", tile_values[tile_coords])
				if typeof(tile_values[tile_coords]) == 1: update_label_at_tile(tile_coords, !tile_values[tile_coords])
			else:
				print(\"No value stored at cell \", tile_coords)
		#else:
			#print(\"Clicked on empty space at coordinates: \", tile_coords)

# Called when the node enters the scene tree for the first time.
func _ready():    # Change the tile at position (2, 3) to tile ID 1
	print(allowedBlocks)
	print(allowedBlocks[0])
	print(len(allowedBlocks))
	print(allowedBlocks.find(72))
	change_tile(Vector2i(startPosition), 6)
	#change_tile(Vector2i(0, 2), 6)
	#change_tile(Vector2i(0, 0), 6)
	#spawn_labels_for_tile_id(6)
	# Clear the tile at position (4, 5)
	# change_tile(Vector2i(4, 5), -1) # ignore and fix this later!!!!!

func updateAI(prevDir) -> void:
	
	var newPos = Vector2i(0,0)
	var replacementTest = 0
	match prevDir:
		1:
			newPos = Vector2i(pos.x, pos.y-1); replacementTest = get_tile_id_at(newPos)
			if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
				updatePosition(\"up\")
		2:
			newPos = Vector2i(pos.x+1, pos.y); replacementTest = get_tile_id_at(newPos)
			if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
				updatePosition(\"right\")


		3:
			
			newPos = Vector2i(pos.x, pos.y+1); replacementTest = get_tile_id_at(newPos)
			if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
				updatePosition(\"down\")
		4:
			newPos = Vector2i(pos.x-1, pos.y); replacementTest = get_tile_id_at(newPos)
			if  replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks:
				updatePosition(\"left\")
				
	if int(replacementTest) in specialBlocks:
		match replacementTest:
			71:
				print(\"3\")
				print(\"Possible failure point (block has got incorrect flag)\")
				if tile_values.has(newPos):
					if tile_values[newPos]:
						currDr += 1
						if currDr >= 5: currDr = 1
					else:
						currDr -= 1
						if currDr <= 0: currDr = 4
				else:
					print(\"Blcok did not have flag.\")

func loadLevel(level) -> void:
	currDr = startDir[level]

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
	#updateAI(currDr)
	#if Input.is_action_just_pressed(\"up\"):
		#updatePosition(\"up\")
	#if Input.is_action_just_pressed(\"left\"):
		#updatePosition(\"left\")
	#if Input.is_action_just_pressed(\"right\"):
		#updatePosition(\"right\")
	#if Input.is_action_just_pressed(\"down\"):
		#updatePosition(\"down\")
		


func _on_button_pressed():
	updateAI(currDr)


func _on_reset_button_pressed():
	pass # Run the ready code????
"

[node name="level" type="Node2D"]
script = SubResource("GDScript_6h84l")

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource("1_o1dhr")
format = 2
layer_0/tile_data = PackedInt32Array(458766, 90, 0, 458765, 90, 0, 393229, 90, 0, 327693, 91, 0, 262157, 91, 0, 196621, 91, 0, 131085, 91, 0, 65549, 91, 0, 65536, 90, 0, 131072, 90, 0, 196608, 90, 0, 262144, 90, 0, 327680, 90, 0, 393216, 90, 0, 458752, 90, 0, 524288, 90, 0, 524289, 90, 0, 458753, 90, 0, 393217, 90, 0, 327681, 91, 0, 262145, 91, 0, 196609, 91, 0, 131073, 91, 0, 65537, 91, 0, 65538, 0, 0, 131074, 0, 0, 196610, 0, 0, 262146, 0, 0, 327682, 91, 0, 393218, 90, 0, 458754, 90, 0, 524290, 90, 0, 524291, 90, 0, 458755, 90, 0, 393219, 90, 0, 327683, 91, 0, 262147, 0, 0, 196611, 91, 0, 131075, 91, 0, 65539, 91, 0, 65540, 0, 0, 131076, 0, 0, 196612, 91, 0, 262148, 0, 0, 327684, 91, 0, 393220, 90, 0, 458756, 90, 0, 524292, 90, 0, 524293, 90, 0, 458757, 90, 0, 393221, 90, 0, 327685, 91, 0, 262149, 0, 0, 196613, 91, 0, 131077, 0, 0, 65541, 0, 0, 65542, 0, 0, 131078, 0, 0, 196614, 91, 0, 262150, 0, 0, 327686, 91, 0, 393222, 90, 0, 458758, 90, 0, 524294, 90, 0, 524295, 90, 0, 458759, 93, 0, 393223, 0, 0, 327687, 0, 0, 262151, 120, 0, 196615, 91, 0, 131079, 0, 0, 65543, 0, 0, 65544, 0, 0, 131080, 0, 0, 196616, 91, 0, 262152, 0, 0, 327688, 91, 0, 393224, 90, 0, 458760, 90, 0, 524296, 90, 0, 524297, 90, 0, 458761, 90, 0, 393225, 90, 0, 327689, 91, 0, 262153, 0, 0, 196617, 91, 0, 131081, 0, 0, 65545, 0, 0, 65546, 0, 0, 131082, 0, 0, 196618, 91, 0, 262154, 0, 0, 327690, 91, 0, 393226, 90, 0, 458762, 90, 0, 524298, 90, 0, 524299, 90, 0, 458763, 90, 0, 393227, 90, 0, 327691, 91, 0, 262155, 0, 0, 196619, 91, 0, 131083, 91, 0, 65547, 91, 0, 65548, 0, 0, 131084, 0, 0, 196620, 0, 0, 262156, 0, 0, 327692, 91, 0, 393228, 90, 0, 458764, 90, 0, 524300, 90, 0, 65550, 90, 0, 131086, 90, 0, 196622, 90, 0, 262158, 90, 0, 327694, 90, 0, 524301, 90, 0, 524302, 90, 0, 393230, 90, 0, 0, 90, 0, 1, 90, 0, 2, 90, 0, 3, 90, 0, 4, 90, 0, 5, 90, 0, 6, 90, 0, 7, 90, 0, 8, 90, 0, 9, 90, 0, 10, 90, 0, 11, 90, 0, 12, 90, 0, 13, 90, 0, 14, 90, 0)
script = ExtResource("2_him4c")

[node name="RichTextLabel" type="RichTextLabel" parent="TileMap"]
offset_left = 40.0
offset_top = 10.0
offset_right = 110.0
offset_bottom = 30.0
scroll_active = false
script = ExtResource("3_rp448")

[node name="Button" type="Button" parent="TileMap"]
offset_left = 138.0
offset_top = 76.0
offset_right = 146.0
offset_bottom = 84.0

[node name="resetButton" type="Button" parent="TileMap"]
offset_left = 6.0
offset_top = 5.0
offset_right = 14.0
offset_bottom = 13.0

[node name="optionsPanel" type="Panel" parent="."]
visible = false
offset_right = 40.0
offset_bottom = 40.0

[node name="upBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_left = 72.0
offset_top = 13.0
offset_right = 112.0
offset_bottom = 53.0
scale = Vector2(0.193364, 0.193364)
toggle_mode = true
texture_normal = ExtResource("3_adufm")
stretch_mode = 0
script = ExtResource("3_oi8mv")
metadata/up = ""

[node name="downBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/down = ""

[node name="leftBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/left = ""

[node name="rightBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/right = ""

[node name="codePanel" type="Panel" parent="."]
visible = false
offset_top = 44.0
offset_right = 40.0
offset_bottom = 84.0
script = ExtResource("4_6or88")

[node name="executionButton" type="Button" parent="."]
visible = false
offset_left = 35.0
offset_top = 82.0
offset_right = 43.0
offset_bottom = 90.0

[connection signal="pressed" from="TileMap/Button" to="." method="_on_button_pressed"]
[connection signal="pressed" from="TileMap/resetButton" to="." method="_on_reset_button_pressed"]

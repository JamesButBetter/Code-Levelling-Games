[gd_scene load_steps=8 format=3 uid="uid://tmncwa8ekv5l"]

[ext_resource type="TileSet" uid="uid://dxtnssuqawohx" path="res://backdrops.tres" id="1_o1dhr"]
[ext_resource type="Script" path="res://game.gd" id="2_him4c"]
[ext_resource type="Texture2D" uid="uid://bcv8a001ke3v8" path="res://upBlockTest.png" id="3_adufm"]
[ext_resource type="Script" path="res://upBlock.gd" id="3_oi8mv"]
[ext_resource type="Script" path="res://instruction_text.gd" id="3_rp448"]
[ext_resource type="Script" path="res://codePanel.gd" id="4_6or88"]

[sub_resource type="GDScript" id="GDScript_6h84l"]
script/source = "extends Node2D
# Assuming you have a TileMap node in your scene
@onready var tilemap: TileMap = $TileMap

@export var currLevel = 0


var directions = {
	\"Movement\": [\"up\", \"right\", \"down\", \"left\"],
	\"Rendering\": [0, 1, 2, 3],
	\"Ai\": [0, 1, 2, 3]
}

var robots = 0

var startPosition = Vector2i(7, 7)
var replacedTile = []
var pos = [] # Vector2i(7, 7)
var replacedTileOrientation = []

var currDr = [] # int

var tile_values: Dictionary = {}

var allowedBlocks = [0, 70, 71, 72, 73,93, 74 ]
#var blockedBlocks = []
var addedTiles = 7
var levelAllowedBlocks = [120] # Maybe make 90 jump for block or move allowed special to 90
var specialBlocks = [70, 71, 72, 73] # Redirect block

var levelTilesPoint = 90

func change_tile(cell_position: Vector2i, new_tile_id: int, new_tile_atlas_coords: Vector2i = Vector2i(0, 0)) -> void:
	# Set the tile at the specified cell position
	tilemap.set_cell(0, cell_position, new_tile_id, new_tile_atlas_coords)

func get_tile_id_at(cell_position: Vector2i) -> int:
	# Get the source ID of the tile at the specified cell position
	var source_id: int = tilemap.get_cell_source_id(0, cell_position)
	
	# If there's a tile at the position, return its source ID; otherwise, return -1
	return source_id

func get_tile_coordinates(cell: Vector2i) -> Dictionary:
	# Get the tile's top-left corner in the TileMap's local space
	var tile_top_left = tilemap.map_to_local(cell)

	# Get the tile's size
	var tile_size = Vector2(tilemap.tile_set.tile_size)

	# Calculate the tile's bottom-right corner
	var tile_bottom_right = tile_top_left + tile_size

	# Calculate the tile's center
	var tile_center = (tile_top_left + tile_bottom_right) / 2

	# Return the coordinates as a dictionary
	return {
		\"top_left\": tile_top_left,
		\"bottom_right\": tile_bottom_right,
		\"center\": tile_center
	}

func search_for_tile_id(tile_id: int) -> Array:
	# Initialize an empty array to store matching tile coordinates
	var matching_coords = []

	# Get all used cells in the TileMap
	var used_cells = tilemap.get_used_cells(0)

	# Iterate through all used cells
	for cell in used_cells:
		# Check if the tile has the specified ID
		if get_tile_id_at(cell) == tile_id:
			# Add the cell coordinates to the matching_coords array
			matching_coords.append(cell)

	# Return the list of matching tile coordinates
	return matching_coords


func spawn_labels_for_tile_id(tile_id: int, data) -> void:

	# Iterate through the matching coordinates and spawn labels
	for coords in search_for_tile_id(tile_id):
		spawn_labels_at_tile(coords, data)

func spawn_labels_at_tile(cell: Vector2i, data) -> void:
	# Create a Label node
	var label = Label.new()
	label.text = str(data)
	if typeof(data) == 1:
		if data: label.text = \"T\"
		elif not data: label.text = \"F\"
		else: print(\"Something went very wrong (f0wuf).\")

	# Scale the label to 20%
	label.scale = Vector2(0.4, 0.4)
	
	# --- Calculate the tile's center ---
	# 1. Get the tile's top-left corner in the TileMap's local space
	var tile_local_pos = tilemap.map_to_local(cell)

	# --- Adjust the label's position to center it ---
	# 1. Get the label's scaled size
	var label_size = label.get_minimum_size() * label.scale
	print(label_size)
	# 2. Offset the label so its center aligns with the tile's center
	label.position = tile_local_pos - (label_size / 2)

	# Add the Label to the scene
	add_child(label)

	# Store the value
	tile_values[cell] = data

func destroy_labels_for_tile_id(tile_id: int) -> void:
	# Get all used cells in the TileMap
	var used_cells = tilemap.get_used_cells(0)

	for cell in used_cells:
		# Check if the tile has the specified ID
		if get_tile_id_at(cell) == tile_id:
			await destroy_label_at_tile(cell)

func destroy_label_at_tile(cell: Vector2i) -> void:
	# Check if the tile has a stored value
	if tile_values.has(cell):
		# Remove the value from the dictionary
		tile_values.erase(cell)

		# Iterate through all children to find the label associated with the tile
		for child in get_children():
			if child is Label:
				# Calculate the expected position of the label for the given cell
				var tile_local_pos = tilemap.map_to_local(cell)
				var label_size = child.get_minimum_size() * child.scale
				var expected_position = tile_local_pos - (label_size / 2)

				# If the label's position matches the expected position, remove it
				if child.position == expected_position:
					child.queue_free()  # Remove the label node from the scene
					break  # Exit the loop once the label is found and removed

func update_label_at_tile(cell: Vector2i, data) -> void:
	await destroy_label_at_tile(cell)
	await spawn_labels_at_tile(cell, data)

func checkCanMoveToBlock(replacementTest) -> bool:
	print(replacementTest)
	return (replacementTest < levelTilesPoint or replacementTest in levelAllowedBlocks); print(\"Should start blocks also act as arrow blocks????\")

func updatePosition(dir, robot) -> void:
	change_tile(pos[robot], replacedTile[robot])
	set_rotation_at_coords(pos[robot], replacedTileOrientation[robot])
	print(\"Set totation at cords\", pos[robot], replacedTileOrientation[robot])
	match dir:
		
		0: # Up
			pos.y -= 1
		1: # Right
			pos.x += 1
		2: # Down
			pos.y += 1
		3: # Left
			pos.x -= 1
		4:
			pass
			
	replacedTile = get_tile_id_at(pos[robot])
	replacedTileOrientation = get_rotation_at_coords(pos[robot])
	change_tile(pos[robot],6)
	set_rotation_at_coords(pos[robot], currDr[robot])

func _input(event: InputEvent) -> void:
		
	# Check if the event is a mouse button click
	if event is InputEventMouseButton and event.pressed:
		# Get the mouse position in the TileMap's local space
		var mouse_position: Vector2 = tilemap.get_local_mouse_position()
		
		# Convert the mouse position to tile coordinates
		var tile_coords: Vector2i = tilemap.local_to_map(mouse_position)

		match event.button_index:
			
			
			MOUSE_BUTTON_LEFT:

				# Check if the tile coordinates are valid (optional)
				var curr = tilemap.get_cell_source_id(0, tile_coords)
				if (curr != -1) and (curr <levelTilesPoint or curr in allowedBlocks):
					await destroy_label_at_tile(tile_coords)
					var pointer = 0
					if event.shift_pressed:
						pointer = allowedBlocks.find(get_tile_id_at(tile_coords))-1 # [0,0,0,0]
						if pointer > 0: print(pointer)
						else: pointer = len(allowedBlocks)-1
						print(pointer)
					else:
						pointer = allowedBlocks.find(get_tile_id_at(tile_coords))+1 # [0,0,0,0]
						if pointer < len(allowedBlocks): print(pointer)
						else: pointer = 0
						print(pointer)
					
					match allowedBlocks[pointer]:
						0:
							pass ##nothing
						70:
							await spawn_labels_at_tile(tile_coords, 7) # Counter block. Annoying colour? no change design.
							
						71:
							await spawn_labels_at_tile(tile_coords, true) # Switch block
						72:
							await spawn_labels_at_tile(tile_coords, 7) # CountDownBlock
						73:
							pass ##idk
						93:
							await spawn_labels_at_tile(tile_coords, false)
					
					change_tile(tile_coords, allowedBlocks[pointer])
					
					
					
			MOUSE_BUTTON_RIGHT:
				print(\"Value at cell \", tile_coords)
				if tile_values.has(tile_coords):
					print(\"Value at cell \", tile_coords, \": \", tile_values[tile_coords])
					print(typeof(tile_values[tile_coords]))
				else:
					print(\"No value stored at cell \", tile_coords)
			MOUSE_BUTTON_WHEEL_UP:
				if !event.shift_pressed:
					rotate_tile_at_coords(tile_coords,true)
					print(\"rotating clockwise\")
				else:
					if tile_values.has(tile_coords):

						print(\"Value at cell \", tile_coords, \": \", tile_values[tile_coords])
						if typeof(tile_values[tile_coords]) == 1: await update_label_at_tile(tile_coords, true)
						if typeof(tile_values[tile_coords]) == 2: await update_label_at_tile(tile_coords, tile_values[tile_coords]+1)
					else:
						print(\"No value stored at cell \", tile_coords)

			MOUSE_BUTTON_WHEEL_DOWN:
				if !event.shift_pressed:
					rotate_tile_at_coords(tile_coords,false)
					print(\"rotating anticlockwise\")
				else:
					if tile_values.has(tile_coords):
						print(\"Value at cell \", tile_coords, \": \", tile_values[tile_coords])
						if typeof(tile_values[tile_coords]) == 1: await update_label_at_tile(tile_coords, false)
						if typeof(tile_values[tile_coords]) == 2: await update_label_at_tile(tile_coords, tile_values[tile_coords]-1)
					else:
						print(\"No value stored at cell \", tile_coords)

func rotate_tile_at_coords(coords: Vector2i, clockwise: bool) -> void:
	var layer := 0
	
	# Get current tile data
	var source_id := tilemap.get_cell_source_id(layer, coords)
	var atlas_coords := tilemap.get_cell_atlas_coords(layer, coords)
	var alternative_tile := tilemap.get_cell_alternative_tile(layer, coords)
	
	# Calculate new rotation (cycle through 0-3 alternatives for 0째, 90째, 180째, 270째)
	var new_alternative: int
	if clockwise:
		new_alternative = (alternative_tile + 1) % 4
	else:
		new_alternative = (alternative_tile - 1 + 4) % 4  # Ensure no negative values
	
	# Update the tile with the new rotation
	tilemap.set_cell(layer, coords, source_id, atlas_coords, new_alternative) #  Up: 0, Right: 1, Down: 2, Left: 3
func get_rotation_at_coords(coords: Vector2i) -> int:
	var layer := 0
	
	# Get the alternative tile index (0-3 for rotations)
	var alternative_tile := tilemap.get_cell_alternative_tile(layer, coords)
	
	# Ensure the alternative tile is within the expected range (0-3)
	return alternative_tile % 4 #  Up: 0, Right: 1, Down: 2, Left: 3

func set_rotation_at_coords(coords: Vector2i, rotation: int) -> void:
	var layer := 0
	
	# Get current tile data
	var source_id := tilemap.get_cell_source_id(layer, coords)
	var atlas_coords := tilemap.get_cell_atlas_coords(layer, coords)
	
	# Ensure the rotation is within the valid range (0-3)
	var new_alternative := rotation % 4
	
	# Update the tile with the new rotation
	tilemap.set_cell(layer, coords, source_id, atlas_coords, new_alternative) #  Up: 0, Right: 1, Down: 2, Left: 3

# Called when the node enters the scene tree for the first time.
func _ready():    # Change the tile at position (2, 3) to tile ID 1
	print(allowedBlocks)
	print(allowedBlocks[0])
	print(len(allowedBlocks))
	print(allowedBlocks.find(72))
	change_tile(Vector2i(startPosition), 6)
	#change_tile(Vector2i(0, 2), 6)
	#change_tile(Vector2i(0, 0), 6)
	#spawn_labels_for_tile_id(6)
	# Clear the tile at position (4, 5)
	# change_tile(Vector2i(4, 5), -1) # ignore and fix this later!!!!!

func updateAI(robot) -> void:
	
	var newPos = Vector2i(0,0)
	
	var replacementTest = 0
	match currDr:
		0:
			newPos = Vector2i(pos.x, pos.y-1)
		1:
			newPos = Vector2i(pos.x+1, pos.y)
		2:
			newPos = Vector2i(pos.x, pos.y+1)
		3:
			newPos = Vector2i(pos.x-1, pos.y)
		
	
	replacementTest = get_tile_id_at(newPos); replacedTileOrientation = get_rotation_at_coords(newPos)
		
	var stopBlockDirection: int = 7
	
	if checkCanMoveToBlock(replacementTest):
		stopBlockDirection = await handleStopBlocks(replacementTest, newPos, robot)
		if stopBlockDirection != 7: updatePosition(currDr[robot])
		currDr = await handleSpeicalBlocks(replacementTest, newPos)
		
		if stopBlockDirection < 4: currDr = stopBlockDirection
		
func handleStopBlocks(replacementTest, newPos, robot) -> int:
	var newDr: int = 7
	match replacementTest:
		70:
			print(\"handling for block id:70\")
			if tile_values[newPos] > 0: newDr = (currDr[robot] + 2) % 4
			else: return 7
			await update_label_at_tile(newPos, tile_values[newPos]-1)
		_:
			return 9
	return newDr

func handleSpeicalBlocks(replacementTest, newPos) -> int:
	var newDr = currDr
	if int(replacementTest) in specialBlocks:
		match replacementTest:
			71:
				#print(replacedTileOrientation)
				if replacedTileOrientation == newDr:
					print(\"3\")
					print(\"Possible failure point (block has got incorrect flag)\")
					if tile_values.has(newPos):
						if tile_values[newPos]: newDr = (newDr + 1) % 4
						else: newDr = (newDr + 3) % 4
					else: print(\"Blcok did not have flag.\")
				else: print(\"player was wrong orientation?\") # Ignore nested if statments (I know it's bad practice slide and I'll buy y'all McDonalds)
			72:
				#print(\"++startlisten++\")
				#print(newDr)
				if tile_values[newPos] > 0 : newDr = (newDr + 1) % 4;await update_label_at_tile(newPos, tile_values[newPos]-1) # Update only if one, becuase one resolves to zero.
				else: newDr = (newDr + 3) % 4
				if tile_values[newPos] > 0: pass # Maybe use non 0-index values here.
				print(newDr)
				#return newDr
			73:
				newDr = replacedTileOrientation # kms
				print(replacedTileOrientation, newDr)

	return newDr

func loadLevel(level) -> void:
	pass
	#currDr = startDir[level]
var time: float = 0.0

var action: bool = false
# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if action:
		time += delta
		if time > 0.4:
			time = 0
			updateAI()
	#updateAI(currDr)
	#if Input.is_action_just_pressed(\"up\"):
		#updatePosition(\"up\")
	#if Input.is_action_just_pressed(\"left\"):
		#updatePosition(\"left\")
	#if Input.is_action_just_pressed(\"right\"):
		#updatePosition(\"right\")
	#if Input.is_action_just_pressed(\"down\"):
		#updatePosition(\"down\")
		


func deleteRobots() -> void:
	for robot in robots:
		change_tile(pos[robot], replacedTile[robot])
		set_rotation_at_coords(pos[robot], replacedTileOrientation[robot])
	currDr = []
	pos = []
	replacedTile = []
	replacedTileOrientation = []
	robots = 0
		

func spawnRobots() -> void:
	for coords in search_for_tile_id(93):
		currDr.append(get_rotation_at_coords(coords))
		pos.append(coords)
		replacedTile.append(get_tile_id_at(coords))
		replacedTileOrientation.append(get_rotation_at_coords(coords))
		robots += 1
		updatePosition(4)
		

func _on_reset_button_pressed():
	deleteRobots()
	#change_tile(pos, 0)
	#pos = startPosition
	#replacedTile = 93
	#pos = Vector2i(7, 7)
	#replacedTileOrientation = 0
	#replacedTileOrientation = 0
	#change_tile(Vector2i(startPosition), 6)
	
	currDr = 0


func _on_button_button_down():

	#action = true
	spawnRobots()
	print(currDr, pos, replacedTile, replacedTileOrientation, \":::\", robots)


func _on_button_button_up():
	action = false



# TODO
# ALLOW USER TO STEP OVER BLOCKS INSDE OF WHEN(TOUCH)
# Preview short simulation (softline?)


func _on_button_2_pressed():
	OS.shell_open(\"https://jamesbutbetter.github.io/Code-Levelling-Games/tutorial.html\")
"

[node name="level" type="Node2D"]
script = SubResource("GDScript_6h84l")
currLevel = null

[node name="TileMap" type="TileMap" parent="."]
tile_set = ExtResource("1_o1dhr")
format = 2
layer_0/tile_data = PackedInt32Array(458766, 90, 0, 458765, 0, 0, 393229, 0, 0, 327693, 0, 0, 262157, 0, 0, 196621, 0, 0, 131085, 0, 0, 65549, 0, 0, 65536, 90, 0, 131072, 90, 0, 196608, 90, 0, 262144, 90, 0, 327680, 90, 0, 393216, 90, 0, 458752, 90, 0, 524288, 90, 0, 524289, 90, 0, 458753, 0, 0, 393217, 0, 0, 327681, 0, 0, 262145, 0, 0, 196609, 0, 0, 131073, 0, 0, 65537, 0, 0, 65538, 0, 0, 131074, 0, 0, 196610, 0, 0, 262146, 0, 0, 327682, 0, 0, 393218, 0, 0, 458754, 0, 0, 524290, 90, 0, 524291, 90, 0, 458755, 0, 0, 393219, 0, 0, 327683, 0, 0, 262147, 0, 0, 196611, 0, 0, 131075, 0, 0, 65539, 0, 0, 65540, 0, 0, 131076, 0, 0, 196612, 0, 0, 262148, 0, 0, 327684, 0, 0, 393220, 0, 0, 458756, 0, 0, 524292, 90, 0, 524293, 90, 0, 458757, 0, 0, 327685, 0, 0, 262149, 0, 0, 196613, 0, 0, 131077, 0, 0, 65541, 0, 0, 65542, 0, 0, 131078, 0, 0, 196614, 0, 0, 262150, 0, 0, 327686, 0, 0, 393222, 0, 0, 458758, 0, 0, 524294, 90, 0, 524295, 90, 0, 458759, 0, 0, 393223, 0, 0, 327687, 0, 0, 262151, 0, 0, 196615, 0, 0, 131079, 0, 0, 65543, 0, 0, 65544, 0, 0, 131080, 0, 0, 196616, 0, 0, 262152, 0, 0, 327688, 0, 0, 393224, 0, 0, 458760, 0, 0, 524296, 90, 0, 524297, 90, 0, 458761, 0, 0, 393225, 0, 0, 327689, 0, 0, 262153, 0, 0, 196617, 0, 0, 131081, 0, 0, 65545, 0, 0, 65546, 0, 0, 131082, 0, 0, 196618, 0, 0, 262154, 0, 0, 327690, 0, 0, 393226, 0, 0, 458762, 0, 0, 524298, 90, 0, 524299, 90, 0, 458763, 0, 0, 393227, 0, 0, 327691, 0, 0, 262155, 0, 0, 196619, 0, 0, 131083, 0, 0, 65547, 0, 0, 65548, 0, 0, 131084, 0, 0, 196620, 0, 0, 262156, 0, 0, 327692, 0, 0, 393228, 0, 0, 458764, 0, 0, 524300, 90, 0, 65550, 90, 0, 131086, 90, 0, 196622, 90, 0, 262158, 90, 0, 327694, 90, 0, 524301, 90, 0, 524302, 90, 0, 393230, 90, 0, 0, 90, 0, 1, 90, 0, 2, 90, 0, 3, 90, 0, 4, 90, 0, 5, 90, 0, 6, 90, 0, 7, 90, 0, 8, 90, 0, 9, 90, 0, 10, 90, 0, 11, 90, 0, 12, 90, 0, 13, 90, 0, 14, 90, 0, 393221, 0, 0)
script = ExtResource("2_him4c")

[node name="RichTextLabel" type="RichTextLabel" parent="TileMap"]
offset_left = 1.0
offset_right = 207.0
offset_bottom = 23.0
scale = Vector2(0.434915, 0.434915)
text = "SANDBOX MODE ENABLED"
fit_content = true
scroll_active = false
autowrap_mode = 0
script = ExtResource("3_rp448")

[node name="Button" type="Button" parent="TileMap"]
offset_left = 140.0
offset_top = 82.0
offset_right = 179.0
offset_bottom = 113.0
scale = Vector2(0.230171, 0.230171)
text = "Run"

[node name="resetButton" type="Button" parent="TileMap"]
offset_left = 125.0
offset_top = 81.0
offset_right = 176.0
offset_bottom = 112.0
scale = Vector2(0.257292, 0.257292)
text = "Reset"

[node name="Button2" type="Button" parent="TileMap"]
offset_left = 1.0
offset_top = 81.0
offset_right = 43.0
offset_bottom = 112.0
scale = Vector2(0.258182, 0.258182)
text = "Wiki"

[node name="Button3" type="Button" parent="TileMap"]
offset_left = 122.0
offset_top = 5.0
offset_right = 218.0
offset_bottom = 36.0
scale = Vector2(0.118492, 0.118492)
text = "Main menu"

[node name="Button4" type="Button" parent="TileMap"]
offset_left = 136.0
offset_top = 5.0
offset_right = 192.0
offset_bottom = 36.0
scale = Vector2(0.117701, 0.117701)
text = "Levels"

[node name="RichTextLabel2" type="RichTextLabel" parent="TileMap"]
offset_left = 121.0
offset_right = 232.0
offset_bottom = 23.0
scale = Vector2(0.203655, 0.202319)
text = "(Coming soon)"
fit_content = true
scroll_active = false
autowrap_mode = 0

[node name="optionsPanel" type="Panel" parent="."]
visible = false
offset_right = 40.0
offset_bottom = 40.0

[node name="upBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_left = 72.0
offset_top = 13.0
offset_right = 112.0
offset_bottom = 53.0
scale = Vector2(0.193364, 0.193364)
toggle_mode = true
texture_normal = ExtResource("3_adufm")
stretch_mode = 0
script = ExtResource("3_oi8mv")
metadata/up = ""

[node name="downBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/down = ""

[node name="leftBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/left = ""

[node name="rightBlock" type="TextureButton" parent="optionsPanel"]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/right = ""

[node name="codePanel" type="Panel" parent="."]
visible = false
offset_top = 44.0
offset_right = 40.0
offset_bottom = 84.0
script = ExtResource("4_6or88")

[node name="executionButton" type="Button" parent="."]
visible = false
offset_left = 35.0
offset_top = 82.0
offset_right = 43.0
offset_bottom = 90.0

[connection signal="button_down" from="TileMap/Button" to="." method="_on_button_button_down"]
[connection signal="button_up" from="TileMap/Button" to="." method="_on_button_button_up"]
[connection signal="pressed" from="TileMap/resetButton" to="." method="_on_reset_button_pressed"]
[connection signal="pressed" from="TileMap/Button2" to="." method="_on_button_2_pressed"]
